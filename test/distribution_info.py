from typing import Any, Callable, Generic, Optional, TypeVar

import numpy as np
from jax.dtypes import canonicalize_dtype
from numpy.random import Generator
from tjax import Shape

from efax import ExponentialFamily


def canonicalize_array(array: np.ndarray) -> np.ndarray:
    return array.astype(canonicalize_dtype(array.dtype))


T = TypeVar('T', bound=ExponentialFamily)


class DistributionInfo(Generic[T]):

    def __init_subclass__(cls, **kwargs: Any) -> None:
        super().__init_subclass__(**kwargs)

        if (cls.exp_to_scipy_distribution is DistributionInfo.exp_to_scipy_distribution
                and cls.nat_to_scipy_distribution is DistributionInfo.nat_to_scipy_distribution):
            raise TypeError

        if (cls.exp_parameter_generator is DistributionInfo.exp_parameter_generator
                and cls.nat_parameter_generator is DistributionInfo.nat_parameter_generator):
            raise TypeError

        for method in ['exp_parameter_generator', 'nat_parameter_generator',
                       'exp_to_scipy_distribution', 'nat_to_scipy_distribution',
                       'scipy_to_exp_family_observation']:
            old_method = getattr(cls, method)
            def new_method(*args: Any, old_method=old_method, **kwargs: Any) -> np.ndarray:
                return canonicalize_array(old_method(*args, **kwargs))

            setattr(cls, method, new_method)

    def __init__(self, exp_family: T):
        """
        Args:
            exp_family: A distribution object from this library
            scipy_to_exp_family_observation: Transforms scipy observations to ones accepted by this
                library.  If it's None, it defaults to the identity function.
        """
        self.exp_family = exp_family

    # New methods ----------------------------------------------------------------------------------
    def exp_to_scipy_distribution(self, p: np.ndarray) -> Any:
        """
        Args:
            p: Expectation parameters.
        Returns: A corresponding scipy distribution.
        """
        return self.nat_to_scipy_distribution(self.exp_family.exp_to_nat(p))

    def nat_to_scipy_distribution(self, q: np.ndarray) -> Any:
        """
        Args:
            p: Natural parameters.
        Returns: A corresponding scipy distribution.
        """
        return self.exp_to_scipy_distribution(self.exp_family.nat_to_exp(q))

    def exp_parameter_generator(self, rng: Generator, shape: Shape) -> np.ndarray:
        """
        Returns: Expectation parameters.  Defaults to converting values generated by
            nat_parameter_generator.
        """
        return self.exp_family.nat_to_exp(self.nat_parameter_generator(rng, shape))

    def nat_parameter_generator(self, rng: Generator, shape: Shape) -> np.ndarray:
        """
        Returns: Natural parameters.  Defaults to converting values generated by
            exp_parameter_generator.
        """
        return self.exp_family.exp_to_nat(self.exp_parameter_generator(rng, shape))

    def scipy_to_exp_family_observation(self, x: np.ndarray) -> np.ndarray:
        """
        Args:
            x: The observation that's produced by the scipy distribution.
        Returns: The observation that's expected by the exponential family.
        """
        return x

    # Magic methods --------------------------------------------------------------------------------
    def __repr__(self) -> str:
        return f"DistributionInfo({self.exp_family})"
